{"version":3,"sources":["PlayerSearchInput.js","Team.js","App.js","serviceWorker.js","index.js"],"names":["PlayerSearchInput","props","handleSubmit","e","preventDefault","getPlayerId","console","log","state","playerName","handleChange","event","replace","target","value","split","join","length","setState","alert","axios","get","then","a","res","data","undefined","getPlayerStats","id","catch","err","playerId","playerStats","className","onSubmit","this","type","onChange","placeholder","position","React","Component","Team","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8TA0FeA,E,kDApFX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAORC,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKC,cACLC,QAAQC,IAAI,EAAKC,MAAMC,aAXT,EAchBC,aAAe,SAACC,GACd,IAAMC,EAAUD,EAAME,OAAOC,MAAMC,MAAM,KAAKC,KAAK,KAChDJ,EAAQK,OAAS,EAClB,EAAKC,SAAS,CAACT,WAAYG,IAG3BO,MAAM,6BApBM,EAyBhBd,YAAc,WACZe,IAAMC,IAAN,2DAA8D,EAAKb,MAAMC,aACxEa,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,SAAAD,EAAA,yDACJjB,QAAQC,IAAIiB,EAAIC,KAAKA,WACGC,IAArBF,EAAIC,KAAKA,KAAK,GAFb,gBAGFN,MAAM,sDAHJ,4BAKIK,EAAIC,KAAKA,KAAKR,OAAS,GAL3B,gBAMFE,MAAM,4BANJ,wCASI,EAAKQ,eAAeH,EAAIC,KAAKA,KAAK,GAAGG,IATzC,4CADN,uDAcCC,OAAM,SAAAC,GACLxB,QAAQC,IAAIuB,OAzCA,EA6ChBH,eAAiB,SAACI,GAChBX,IAAMC,IAAN,qFAAwFU,IACvFT,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,SAAAD,EAAA,sDACJjB,QAAQC,IAAIiB,EAAIC,KAAKA,MAErB,EAAKP,SAAS,CAACc,YAAYR,EAAIC,KAAKA,KAAK,KAHrC,2CADN,uDAMCI,OAAM,SAAAC,GACLxB,QAAQC,IAAIuB,OAnDd,EAAKtB,MAAM,CACTC,WAAY,KACZuB,YAAa,IAJD,E,qDA0Dd,OACA,yBAAKC,UAAY,gBACb,0BAAMC,SAAUC,KAAKjC,cACvB,+BAEE,2BACEkC,KAAO,OACPtB,MAAOqB,KAAK3B,MAAMM,MAClBuB,SAAUF,KAAKzB,aACf4B,YAAaH,KAAKlC,MAAMsC,YAG5B,2BAAOH,KAAK,SAAStB,MAAM,YAX7B,iBAaeqB,KAAK3B,MAAMwB,YAAX,aACf,6BAdA,oBAekBG,KAAK3B,MAAMwB,YAAX,IAClB,6BAhBA,sBAiBoBG,KAAK3B,MAAMwB,YAAX,IACpB,6BAlBA,qBAmBmBG,KAAK3B,MAAMwB,YAAX,S,GAhFKQ,IAAMC,WCevBC,MAhBf,SAAczC,GACV,OACA,yBAAKgC,UAAY,QACb,4BAAKhC,EAAM0C,MACX,kBAAC,EAAD,CAAmBJ,SAAW,gBAC9B,kBAAC,EAAD,CAAmBA,SAAW,mBAC9B,kBAAC,EAAD,CAAmBA,SAAW,kBAC9B,kBAAC,EAAD,CAAmBA,SAAW,kBAC9B,kBAAC,EAAD,CAAmBA,SAAW,aCcvBK,E,kDAlBb,WAAY3C,GAAO,IAAD,8BAChB,cAAMA,IACDO,MAAM,GAFK,E,qDAOhB,OACE,yBAAKyB,UAAU,OACb,kBAAC,EAAD,CAAMU,KAAQ,WACd,kBAAC,EAAD,CAAMA,KAAO,gB,GAZHH,IAAMC,WCOJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.d92b1997.chunk.js","sourcesContent":["import React from 'react';\nimport { render } from '@testing-library/react';\nimport axios from \"axios\";\n\nclass PlayerSearchInput extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n          playerName: null,\n          playerStats: {}\n        }\n      }\n    \n      handleSubmit = (e) => {\n        e.preventDefault();\n        this.getPlayerId();\n        console.log(this.state.playerName)\n      }\n    \n      handleChange = (event) => {\n        const replace = event.target.value.split(\" \").join(\" \");\n        if(replace.length > 0){\n          this.setState({playerName: replace})\n        }\n        else{\n          alert(\"Please Type Players Name\")\n        }\n      }\n      \n    \n      getPlayerId = () => {\n        axios.get(`https://www.balldontlie.io/api/v1/players?search=${this.state.playerName}`)\n        .then(async res =>{\n          console.log(res.data.data)\n          if(res.data.data[0] === undefined){\n            alert(\"This player is either injured or hasn't played yet\")\n          }\n          else if(res.data.data.length > 1){\n            alert(\"Please specify name more\")\n          }\n          else{\n            await this.getPlayerStats(res.data.data[0].id)\n          }\n          \n        })\n        .catch(err=> {\n          console.log(err)\n        })\n      }\n    \n      getPlayerStats = (playerId) => {\n        axios.get(`https://www.balldontlie.io/api/v1/season_averages?season=2019&player_ids[]=${playerId}`)\n        .then(async res => {\n          console.log(res.data.data)\n          \n          this.setState({playerStats:res.data.data[0]})\n        })\n        .catch(err => {\n          console.log(err)\n        })\n      }\n    \n    render(){\n        return(\n        <div className = \"searchPlayer\" >\n            <form onSubmit={this.handleSubmit}>\n          <label>\n            \n            <input\n              type = \"text\"\n              value={this.state.value}\n              onChange={this.handleChange}\n              placeholder={this.props.position}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\"/>\n        </form>\n        Games Played: {this.state.playerStats[\"games_played\"]}\n        <br />\n        Points Averaged: {this.state.playerStats[\"pts\"]}\n        <br />\n        Rebounds Averaged: {this.state.playerStats[\"reb\"]}\n        <br />\n        Assists Averaged: {this.state.playerStats[\"ast\"]}\n        </div>\n        );\n    }    \n}\n\nexport default PlayerSearchInput","import React from 'react';\nimport PlayerSearchInput from './PlayerSearchInput';\n\nfunction Team(props){\n    return(\n    <div className = \"team\" >\n        <h1>{props.name}</h1> \n        <PlayerSearchInput position = \"Point Guard\"/>\n        <PlayerSearchInput position = \"Shooting Guard\"/>\n        <PlayerSearchInput position = \"Small Forward\"/>\n        <PlayerSearchInput position = \"Power Forward\"/>\n        <PlayerSearchInput position = \"Center\"/>\n    </div>\n    )\n}\n\n//eventually add a feature so that the user can name their own teams\n//after the inputs are logged the application will fetch data and \n\nexport default Team","import React from 'react';\nimport Team from './Team'\n//import { render } from '@testing-library/react';\nimport axios from \"axios\";\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      \n    }\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <Team name =  \"Team 1\" />\n        <Team name = \"Team 2\" />\n      </div>\n\n    );\n  }\n}\n//need to test an input and retrieve the stats of a player based on the search of the user\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}